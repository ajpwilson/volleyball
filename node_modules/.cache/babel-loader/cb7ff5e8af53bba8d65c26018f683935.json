{"ast":null,"code":"import _objectSpread from \"/Users/andy/git/volleyball/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport axios from 'axios';\nvar API_URL = 'https://api.flickr.com/services/rest/';\nvar DEFAULT_PARAMS = {\n  api_key: '5f0ca9ae5c0961037501f34373524d33',\n  safe_search: 1,\n  per_page: 20,\n  formate: 'json',\n  nojsoncallback: 1,\n  extras: 'owner_name,description,tags'\n};\n\nfunction getPhotoURL(photo) {\n  var id = photo.id,\n      farm = photo.farm,\n      secret = photo.secret,\n      server = photo.server;\n  return \"https://farm\".concat(farm, \".staticflickr.com/\").concat(server, \"/\").concat(id, \"_\").concat(secret, \".jpg\");\n}\n\nfunction getAuthorURL(photo) {\n  return \"https://www.flickr.com/people/\".concat(photo.owner, \"/\");\n}\n\nexport function fetchPhotos() {\n  var tags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var method = !!tags ? 'flickr.photos.search' : 'flickr.photos.getRecent';\n\n  var params = _objectSpread({}, DEFAULT_PARAMS, {\n    method: method,\n    tags: tags\n  });\n\n  return axios.get(API_URL, {\n    params: params\n  }).then(function (_ref) {\n    var data = _ref.data;\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Fetched photos ', data);\n    }\n\n    if (data.stat === 'fail' || !data.photos) {\n      throw new Error('Flickr request failed.');\n    }\n\n    var photos = data.photos.photo || [];\n    return photos.filter(function (item) {\n      return !filter.isProfane(item.title);\n    }).map(function (item) {\n      item.description._content = striptags(item.description._content);\n      item.photoURL = getPhotoURL(item);\n      item.authorURL = getAuthorURL(item);\n      return item;\n    });\n  });\n}\n;\nexport default {\n  fetchPhotos: fetchPhotos\n};","map":{"version":3,"sources":["/Users/andy/git/volleyball/src/components/Api.js"],"names":["axios","API_URL","DEFAULT_PARAMS","api_key","safe_search","per_page","formate","nojsoncallback","extras","getPhotoURL","photo","id","farm","secret","server","getAuthorURL","owner","fetchPhotos","tags","method","params","get","then","data","process","env","NODE_ENV","console","log","stat","photos","Error","filter","item","isProfane","title","map","description","_content","striptags","photoURL","authorURL"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAG,uCAAhB;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,kCADY;AAErBC,EAAAA,WAAW,EAAE,CAFQ;AAGrBC,EAAAA,QAAQ,EAAE,EAHW;AAIrBC,EAAAA,OAAO,EAAE,MAJY;AAKrBC,EAAAA,cAAc,EAAE,CALK;AAMrBC,EAAAA,MAAM,EAAE;AANa,CAAvB;;AASA,SAASC,WAAT,CAAsBC,KAAtB,EAA6B;AAAA,MAEzBC,EAFyB,GAMvBD,KANuB,CAEzBC,EAFyB;AAAA,MAGzBC,IAHyB,GAMvBF,KANuB,CAGzBE,IAHyB;AAAA,MAIzBC,MAJyB,GAMvBH,KANuB,CAIzBG,MAJyB;AAAA,MAKzBC,MALyB,GAMvBJ,KANuB,CAKzBI,MALyB;AAQ3B,+BAAsBF,IAAtB,+BAA+CE,MAA/C,cAAyDH,EAAzD,cAA+DE,MAA/D;AACD;;AAED,SAASE,YAAT,CAAuBL,KAAvB,EAA8B;AAC5B,iDAAwCA,KAAK,CAACM,KAA9C;AACD;;AAED,OAAO,SAASC,WAAT,GAAiC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AACtC,MAAMC,MAAM,GAAG,CAAC,CAACD,IAAF,GACX,sBADW,GAEX,yBAFJ;;AAIA,MAAME,MAAM,qBACPlB,cADO;AAEViB,IAAAA,MAAM,EAANA,MAFU;AAGVD,IAAAA,IAAI,EAAJA;AAHU,IAAZ;;AAMA,SAAOlB,KAAK,CACTqB,GADI,CACApB,OADA,EACS;AAAEmB,IAAAA,MAAM,EAANA;AAAF,GADT,EAEJE,IAFI,CAEC,gBAAc;AAAA,QAAXC,IAAW,QAAXA,IAAW;;AAElB,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,IAA/B;AACD;;AAED,QAAIA,IAAI,CAACM,IAAL,KAAc,MAAd,IAAwB,CAACN,IAAI,CAACO,MAAlC,EAA0C;AACxC,YAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,QAAMD,MAAM,GAAGP,IAAI,CAACO,MAAL,CAAYpB,KAAZ,IAAqB,EAApC;AAEA,WAAOoB,MAAM,CACVE,MADI,CACG,UAACC,IAAD;AAAA,aAAU,CAACD,MAAM,CAACE,SAAP,CAAiBD,IAAI,CAACE,KAAtB,CAAX;AAAA,KADH,EAEJC,GAFI,CAEA,UAACH,IAAD,EAAU;AACbA,MAAAA,IAAI,CAACI,WAAL,CAAiBC,QAAjB,GAA4BC,SAAS,CAACN,IAAI,CAACI,WAAL,CAAiBC,QAAlB,CAArC;AACAL,MAAAA,IAAI,CAACO,QAAL,GAAgB/B,WAAW,CAACwB,IAAD,CAA3B;AACAA,MAAAA,IAAI,CAACQ,SAAL,GAAiB1B,YAAY,CAACkB,IAAD,CAA7B;AACA,aAAOA,IAAP;AACD,KAPI,CAAP;AAQD,GAtBI,CAAP;AAuBD;AAAA;AAED,eAAe;AAAChB,EAAAA,WAAW,EAAXA;AAAD,CAAf","sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'https://api.flickr.com/services/rest/';\n\nconst DEFAULT_PARAMS = {\n  api_key: '5f0ca9ae5c0961037501f34373524d33',\n  safe_search: 1,\n  per_page: 20,\n  formate: 'json',\n  nojsoncallback: 1,\n  extras: 'owner_name,description,tags'\n};\n\nfunction getPhotoURL (photo) {\n  const {\n    id,\n    farm,\n    secret,\n    server\n  } = photo;\n\n  return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`;\n}\n\nfunction getAuthorURL (photo) {\n  return `https://www.flickr.com/people/${photo.owner}/`;\n}\n\nexport function fetchPhotos (tags = '') {\n  const method = !!tags\n    ? 'flickr.photos.search'\n    : 'flickr.photos.getRecent'\n\n  const params = {\n    ...DEFAULT_PARAMS,\n    method,\n    tags\n  };\n  \n  return axios\n    .get(API_URL, { params })\n    .then(({ data }) => {\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.log('Fetched photos ', data);\n      }\n\n      if (data.stat === 'fail' || !data.photos) {\n        throw new Error('Flickr request failed.');\n      }\n\n      const photos = data.photos.photo || [];\n\n      return photos\n        .filter((item) => !filter.isProfane(item.title))\n        .map((item) => {\n          item.description._content = striptags(item.description._content);\n          item.photoURL = getPhotoURL(item);\n          item.authorURL = getAuthorURL(item);\n          return item;\n        });\n    });\n};\n\nexport default {fetchPhotos};"]},"metadata":{},"sourceType":"module"}