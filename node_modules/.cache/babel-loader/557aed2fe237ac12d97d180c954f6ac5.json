{"ast":null,"code":"import _objectSpread from \"/Users/andy/git/volleyball/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport axios from 'axios';\nvar API_URL = 'https://api.flickr.com/services/rest/?method=flickr.photos.getRecent&api_key=5f0ca9ae5c0961037501f34373524d33&per_page=10&format=json&nojsoncallback=1';\nvar DEFAULT_PARAMS = {\n  api_key: '5f0ca9ae5c0961037501f34373524d33',\n  safe_search: 1,\n  per_page: 20,\n  format: 'json',\n  nojsoncallback: 1,\n  extras: 'owner_name,description,tags'\n};\n\nif (!process.env.REACT_APP_FLICKR_API_KEY) {\n  console.error('No Flickr API key found. Please refer to documentation.');\n} // Returns Flickr photo URL.\n\n\nfunction getPhotoURL(photo) {\n  var id = photo.id,\n      farm = photo.farm,\n      secret = photo.secret,\n      server = photo.server;\n  return \"https://farm\".concat(farm, \".staticflickr.com/\").concat(server, \"/\").concat(id, \"_\").concat(secret, \".jpg\");\n} // Returns Flickr photo URL for the author\n\n\nfunction getAuthorURL(photo) {\n  return \"https://www.flickr.com/people/\".concat(photo.owner, \"/\");\n} // Returns latest photos from public Flickr feed.\n\n\nexport function fetchPhotos() {\n  var tags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  // Search does not support parameterless searching, in which case we fall back to getRecent.\n  var method = !!tags ? 'flickr.photos.search' : 'flickr.photos.getRecent';\n\n  var params = _objectSpread({}, DEFAULT_PARAMS, {\n    method: method,\n    tags: tags\n  });\n\n  return axios.get(API_URL, {\n    params: params\n  }).then(function (_ref) {\n    var data = _ref.data;\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Fetched photos ', data);\n    }\n\n    if (data.stat === 'fail' || !data.photos) {\n      throw new Error('Flickr request failed.');\n    }\n\n    var photos = data.photos.photo || [];\n    return photos.map(function (item) {\n      // item.description._content = striptags(item.description._content);\n      item.photoURL = getPhotoURL(item);\n      item.authorURL = getAuthorURL(item);\n      return item;\n    });\n  });\n}\n;\nexport default {\n  fetchPhotos: fetchPhotos\n};","map":{"version":3,"sources":["/Users/andy/git/volleyball/src/components/Api.js"],"names":["axios","API_URL","DEFAULT_PARAMS","api_key","safe_search","per_page","format","nojsoncallback","extras","process","env","REACT_APP_FLICKR_API_KEY","console","error","getPhotoURL","photo","id","farm","secret","server","getAuthorURL","owner","fetchPhotos","tags","method","params","get","then","data","NODE_ENV","log","stat","photos","Error","map","item","photoURL","authorURL"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAG,wJAAhB;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,kCADY;AAErBC,EAAAA,WAAW,EAAE,CAFQ;AAGrBC,EAAAA,QAAQ,EAAE,EAHW;AAIrBC,EAAAA,MAAM,EAAE,MAJa;AAKrBC,EAAAA,cAAc,EAAE,CALK;AAMrBC,EAAAA,MAAM,EAAE;AANa,CAAvB;;AASA,IAAI,CAACC,OAAO,CAACC,GAAR,CAAYC,wBAAjB,EAA2C;AACzCC,EAAAA,OAAO,CAACC,KAAR,CAAc,yDAAd;AACD,C,CAED;;;AACA,SAASC,WAAT,CAAsBC,KAAtB,EAA6B;AAAA,MAEzBC,EAFyB,GAMvBD,KANuB,CAEzBC,EAFyB;AAAA,MAGzBC,IAHyB,GAMvBF,KANuB,CAGzBE,IAHyB;AAAA,MAIzBC,MAJyB,GAMvBH,KANuB,CAIzBG,MAJyB;AAAA,MAKzBC,MALyB,GAMvBJ,KANuB,CAKzBI,MALyB;AAQ3B,+BAAsBF,IAAtB,+BAA+CE,MAA/C,cAAyDH,EAAzD,cAA+DE,MAA/D;AACD,C,CAED;;;AACA,SAASE,YAAT,CAAuBL,KAAvB,EAA8B;AAC5B,iDAAwCA,KAAK,CAACM,KAA9C;AACD,C,CAGD;;;AACA,OAAO,SAASC,WAAT,GAAiC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AACtC;AACA,MAAMC,MAAM,GAAG,CAAC,CAACD,IAAF,GACX,sBADW,GAEX,yBAFJ;;AAIA,MAAME,MAAM,qBACPvB,cADO;AAEVsB,IAAAA,MAAM,EAANA,MAFU;AAGVD,IAAAA,IAAI,EAAJA;AAHU,IAAZ;;AAMA,SAAOvB,KAAK,CACT0B,GADI,CACAzB,OADA,EACS;AAAEwB,IAAAA,MAAM,EAANA;AAAF,GADT,EAEJE,IAFI,CAEC,gBAAc;AAAA,QAAXC,IAAW,QAAXA,IAAW;;AAElB,QAAInB,OAAO,CAACC,GAAR,CAAYmB,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CjB,MAAAA,OAAO,CAACkB,GAAR,CAAY,iBAAZ,EAA+BF,IAA/B;AACD;;AAED,QAAIA,IAAI,CAACG,IAAL,KAAc,MAAd,IAAwB,CAACH,IAAI,CAACI,MAAlC,EAA0C;AACxC,YAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,QAAMD,MAAM,GAAGJ,IAAI,CAACI,MAAL,CAAYjB,KAAZ,IAAqB,EAApC;AAEA,WAAOiB,MAAM,CACVE,GADI,CACA,UAACC,IAAD,EAAU;AACb;AACAA,MAAAA,IAAI,CAACC,QAAL,GAAgBtB,WAAW,CAACqB,IAAD,CAA3B;AACAA,MAAAA,IAAI,CAACE,SAAL,GAAiBjB,YAAY,CAACe,IAAD,CAA7B;AACA,aAAOA,IAAP;AACD,KANI,CAAP;AAOD,GArBI,CAAP;AAsBD;AAAA;AAED,eAAe;AACbb,EAAAA,WAAW,EAAXA;AADa,CAAf","sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'https://api.flickr.com/services/rest/?method=flickr.photos.getRecent&api_key=5f0ca9ae5c0961037501f34373524d33&per_page=10&format=json&nojsoncallback=1';\n\nconst DEFAULT_PARAMS = {\n  api_key: '5f0ca9ae5c0961037501f34373524d33',\n  safe_search: 1,\n  per_page: 20,\n  format: 'json',\n  nojsoncallback: 1,\n  extras: 'owner_name,description,tags'\n};\n\nif (!process.env.REACT_APP_FLICKR_API_KEY) {\n  console.error('No Flickr API key found. Please refer to documentation.');\n}\n\n// Returns Flickr photo URL.\nfunction getPhotoURL (photo) {\n  const {\n    id,\n    farm,\n    secret,\n    server\n  } = photo;\n\n  return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`;\n}\n\n// Returns Flickr photo URL for the author\nfunction getAuthorURL (photo) {\n  return `https://www.flickr.com/people/${photo.owner}/`;\n}\n\n\n// Returns latest photos from public Flickr feed.\nexport function fetchPhotos (tags = '') {\n  // Search does not support parameterless searching, in which case we fall back to getRecent.\n  const method = !!tags\n    ? 'flickr.photos.search'\n    : 'flickr.photos.getRecent'\n\n  const params = {\n    ...DEFAULT_PARAMS,\n    method,\n    tags\n  };\n  \n  return axios\n    .get(API_URL, { params })\n    .then(({ data }) => {\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.log('Fetched photos ', data);\n      }\n\n      if (data.stat === 'fail' || !data.photos) {\n        throw new Error('Flickr request failed.');\n      }\n\n      const photos = data.photos.photo || [];\n\n      return photos\n        .map((item) => {\n          // item.description._content = striptags(item.description._content);\n          item.photoURL = getPhotoURL(item);\n          item.authorURL = getAuthorURL(item);\n          return item;\n        });\n    });\n};\n\nexport default {\n  fetchPhotos\n};"]},"metadata":{},"sourceType":"module"}