{"version":3,"sources":["components/header/header.js","components/search-bar/search-bar.js","components/image-card/image-card.js","components/image-list/image-list.js","components/app/app.js","components/serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","target","rel","Component","SearchBar","handleSubmit","event","preventDefault","_this","props","fetchPhotos","_this$props","this","searchTerm","updateSearchTerm","perPage","updatePerPage","onSubmit","type","value","onChange","placeholder","disabled","ImageCard","items","console","log","length","map","item","i","key","concat","alt","id","src","url_z","url_o","title","owner","ownername","description","_content","substr","tags","split","tag","ImageList","image_card_image_card","axiosInstance","axios","create","baseURL","params","api_key","method","safe_search","format","nojsoncallback","extras","App","state","_ref","setState","_ref2","_callee","_this$state","_ref4","data","regenerator_default","wrap","_context","prev","next","text","per_page","sent","photos","photo","stop","_this$state2","header_header","search_bar_search_bar","image_list_image_list","Boolean","window","location","hostname","match","ReactDOM","render","app_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2XAuBeA,0LAjBX,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVC,KAAK,0CACLC,OAAO,SACPC,IAAI,uBAJN,gBANaC,cCuCNC,oNApCbC,aAAe,SAAAC,GACbA,EAAMC,iBACNC,EAAKC,MAAMC,uFAGJ,IAAAC,EAC0DC,KAAKH,MAA9DI,EADDF,EACCE,WAAYC,EADbH,EACaG,iBAAkBC,EAD/BJ,EAC+BI,QAASC,EADxCL,EACwCK,cAE/C,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,QAAMmB,SAAUL,KAAKP,cACnBT,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACVmB,KAAK,OACLC,MAAON,EACPO,SAAUN,EACVO,YAAY,cAEdzB,EAAAC,EAAAC,cAAA,UAAQqB,MAAOJ,EAASK,SAAUJ,GAChCpB,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,UACEC,UAAU,MACVmB,KAAK,SACLI,UAAWT,GAHb,mBA1BcV,cCmCToB,0LAjCJ,IACCC,EAAUZ,KAAKH,MAAfe,MAER,OADAC,QAAQC,IAAI,CAAEF,UAEZ5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZyB,EAAMG,OACLH,EAAMI,IAAI,SAACC,EAAMC,GAAP,OACRlC,EAAAC,EAAAC,cAAA,OAAKiC,IAAG,QAAAC,OAAUF,GAAK/B,UAAU,QAC/BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKmC,IAAKJ,EAAKK,GAAIC,IAAKN,EAAKO,SAE/BxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAM6B,EAAKQ,OAAQR,EAAKS,OAA/B,IAA0C1C,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kBAASF,EAAAC,EAAAC,cAAA,KAAGE,KAAI,iCAAAgC,OAAmCH,EAAKU,QAAUV,EAAKW,cAExH5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SAAI+B,EAAKY,YAAYC,SAAWb,EAAKY,YAAYC,SAASC,OAAO,EAAG,KAAhE,mBAEN/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACX8B,EAAKe,KAAKC,MAAM,MAAQ,IAAIjB,IAAI,SAACkB,EAAKhB,GAAN,OAChClC,EAAAC,EAAAC,cAAA,QAAMiC,IAAG,OAAAC,OAASF,GAAK/B,UAAU,OAChC+C,GAAG,iBAMVlD,EAAAC,EAAAC,cAAA,iCA5BYK,cCkBT4C,0LAfJ,IACCvB,EAAUZ,KAAKH,MAAfe,MAER,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,sBAAc0B,EAAMG,SAGtB/B,EAAAC,EAAAC,cAACkD,EAAD,CAAWxB,MAAOA,YAXFrB,cCIlB8C,SAAgBC,IAAMC,OAAO,CACjCC,QAAS,wCACTC,OAAQ,CACNC,QAAS,mCACTC,OAAQ,uBACRC,YAAa,EACbC,OAAQ,OACRC,eAAgB,EAChBC,OAAQ,8CAwDGC,6MAnDbC,MAAQ,CACNhD,WAAY,GACZE,QAAS,GACTS,MAAO,MAITV,iBAAmB,SAAAgD,GAAA,IAAa3C,EAAb2C,EAAG7D,OAAUkB,MAAb,OACjBX,EAAKuD,SAAS,CAAElD,WAAYM,OAG9BH,cAAgB,SAAAgD,GAAA,IAAa7C,EAAb6C,EAAG/D,OAAUkB,MAAb,OAA2BX,EAAKuD,SAAS,CAAEhD,QAASI,OAGpET,iCAAc,SAAAuD,IAAA,IAAAC,EAAArD,EAAAE,EAAAsC,EAAAc,EAAAC,EAAA,OAAAC,EAAAxE,EAAAyE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAP,EACoB1D,EAAKqD,MAA7BhD,EADIqD,EACJrD,WAAYE,EADRmD,EACQnD,QAGdsC,EAAS,CACbqB,KAAM7D,EACN8D,SAAU5D,GANAwD,EAAAE,KAAA,EAUWxB,EAAc,CAAEI,WAV3B,OAAAc,EAAAI,EAAAK,KAUJR,EAVID,EAUJC,KAER5D,EAAKuD,SAAS,CAAEvC,MAAO4C,EAAKS,OAAOC,QAZvB,wBAAAP,EAAAQ,SAAAd,EAAArD,iFAeL,IACCE,EAAiDF,KAAjDE,iBAAkBE,EAA+BJ,KAA/BI,cAAeN,EAAgBE,KAAhBF,YADlCsE,EAEgCpE,KAAKiD,MAApCrC,EAFDwD,EAECxD,MAAOX,EAFRmE,EAEQnE,WAAYE,EAFpBiE,EAEoBjE,QAE3B,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAACmF,EAAD,MACArF,EAAAC,EAAAC,cAACoF,EAAD,CACErE,WAAYA,EACZC,iBAAkBA,EAClBC,QAASA,EACTC,cAAeA,EACfN,YAAaA,IAEfd,EAAAC,EAAAC,cAACqF,EAAD,CAAW3D,MAAOA,YA7CRrB,aCREiF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9F,EAAAC,EAAAC,cAAC6F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b1bf1a09.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './header.css';\n\nclass Header extends Component {\n\n  render() {\n    return (\n      <header className=\"App-header\">\n        <h1>Flickr Photo Stream</h1>\n        <a\n          className=\"App-link\"\n          href='https://github.com/ajpwilson/volleyball'\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Repo\n        </a>\n      </header>\n    )\n  }\n}\n\n\nexport default Header;","import React, { Component } from 'react';\nimport './search-bar.css';\n\nclass SearchBar extends Component {\n\n  // onSubmit cancel browser default and fetch requested photos.\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.fetchPhotos();\n  };\n\n  render() {\n    const { searchTerm, updateSearchTerm, perPage, updatePerPage } = this.props;\n\n    return (\n      <div className=\"search-wrapper\">\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"search\"\n            type=\"text\"\n            value={searchTerm}\n            onChange={updateSearchTerm}\n            placeholder=\"Search...\"\n          />\n          <select value={perPage} onChange={updatePerPage}>\n            <option>20</option>\n            <option>50</option>\n            <option>100</option>\n          </select>\n          <button\n            className=\"btn\"\n            type=\"submit\"\n            disabled={!searchTerm}\n          >\n          Search\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport './image-card.css';\n\nclass ImageCard extends Component {\n\n  render() {\n    const { items } = this.props;\n    console.log({ items });\n    return (\n      <div className=\"card-container\">\n        {items.length ?\n          items.map((item, i) =>\n            <div key={`card-${i}`} className=\"card\">\n              <div className=\"image\">\n                <img alt={item.id} src={item.url_z}/>\n              </div>\n              <div className=\"name\">\n                <h3><a href={item.url_o}>{item.title}</a> <br/><span>by <a href={`https://www.flickr.com/photos/${item.owner}`}>{item.ownername}</a></span></h3>\n              </div>\n              <div className=\"content\">\n                <p>{item.description._content ? item.description._content.substr(0, 100) : `No description` }</p>\n              </div>\n              <div className=\"tags\">\n                {(item.tags.split(' ') || []).map((tag, i) =>\n                  <span key={`tag-${i}`} className=\"tag\">\n                  {tag ? tag : `No tags`}\n                </span>)}\n              </div>\n            </div>\n\n            )\n          : <div>Loading...</div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default ImageCard;","import React, { Component } from 'react';\nimport ImageCard from './../image-card/image-card';\nimport './image-list.css';\n\nclass ImageList extends Component {\n\n  render() {\n    const { items } = this.props;\n\n    return (\n      <div className=\"card-wrapper\">\n        <div className=\"card-count\">\n          <div>Photos: {items.length}</div>\n        </div>\n\n        <ImageCard items={items} />\n      </div>\n    );\n  }\n}\n\nexport default ImageList;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Header from '../header/header';\nimport SearchBar from '../search-bar/search-bar';\nimport ImageList from '../image-list/image-list';\nimport './app.css';\n\n// I've created an axios instance with the url and default params set so I can just reference the code.\nconst axiosInstance = axios.create({\n  baseURL: 'https://api.flickr.com/services/rest/',\n  params: {\n    api_key: '5e263bab53c7c3bfc9350ef4256a1ae7',\n    method: 'flickr.photos.search',\n    safe_search: 1,\n    format: 'json',\n    nojsoncallback: 1,\n    extras: 'description,owner_name,tags,url_o,url_z'\n  }\n});\n\nclass App extends Component {\n  state = {\n    searchTerm: '',\n    perPage: 20,\n    items: []\n  };\n\n  // When the search is updated onChange, the new value is set in the state.\n  updateSearchTerm = ({ target: { value } }) =>\n    this.setState({ searchTerm: value });\n\n  // Same as above but related to number of items being pulled through.\n  updatePerPage = ({ target: { value } }) => this.setState({ perPage: value });\n\n  // Returning a promise using async, this fuction is setting variables to state, Eventually I want to do this in redux.\n  fetchPhotos = async () => {\n    const { searchTerm, perPage } = this.state;\n\n    // Creating the parameter objects from the input.\n    const params = {\n      text: searchTerm,\n      per_page: perPage\n    };\n\n    // Using the axios instance with default params as to not to use unnecessary code by repeating myself.\n    const { data } = await axiosInstance({ params });\n    // Pulling out photos array from response and setting them to state\n    this.setState({ items: data.photos.photo });\n  };\n\n  render() {\n    const { updateSearchTerm, updatePerPage, fetchPhotos } = this;\n    const { items, searchTerm, perPage } = this.state;\n\n    return (\n      <div className=\"App\">\n\n        <Header />\n        <SearchBar\n          searchTerm={searchTerm}\n          updateSearchTerm={updateSearchTerm}\n          perPage={perPage}\n          updatePerPage={updatePerPage}\n          fetchPhotos={fetchPhotos}\n        />\n        <ImageList items={items} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\nimport * as serviceWorker from './components/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}